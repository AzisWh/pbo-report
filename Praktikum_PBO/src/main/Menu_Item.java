/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package main;

import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/**
 *
 * @author LENOVO
 */
public class Menu_Item extends javax.swing.JPanel {

    private ActionListener act;
    
    public void setShowing(boolean showing){
        this.showing = showing;
    }
    
    
    /**
     * @return the subMenu
     */
    public ArrayList<Menu_Item> getSubMenu() {
        return subMenu;
    }

    private final ArrayList<Menu_Item> subMenu = new ArrayList<>();

    /**
     * @param sbm   
     * @param menuNama   
     * @param act   
     * @param subMenu   
     */
    public Menu_Item(boolean sbm, String menuNama, ActionListener act, Menu_Item... subMenu) {
        initComponents();
        
        menuName.setText(menuNama);
        submenu.setVisible(sbm);
        
        //sidebar
        if(act != null){
            this.act = act;
        }
        this.setSize(new Dimension(Integer.MAX_VALUE, 45));
        this.setMaximumSize(new Dimension(Integer.MAX_VALUE, 45));
        this.setMinimumSize(new Dimension(Integer.MAX_VALUE, 45));
        for (Menu_Item subMenu1 : subMenu) {
            this.subMenu.add(subMenu1);
            subMenu1.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuName = new javax.swing.JLabel();
        submenu = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        menuName.setText("Menu Item...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(submenu)
                .addGap(43, 43, 43)
                .addComponent(menuName)
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(menuName)
                    .addComponent(submenu))
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents
   
    private boolean showing =false;
    //muncul menu sidebar ketika di klik
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (showing){
            hideMenu();
        }else{
            showMenu();
        }
        if(act != null){
            act.actionPerformed(null);
        }
    }//GEN-LAST:event_formMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel menuName;
    private javax.swing.JLabel submenu;
    // End of variables declaration//GEN-END:variables

   
    private void hideMenu() {
        new Thread(() -> {
            for(int i = getSubMenu().size()-1;i>=0;i--){
                sleep();
                getSubMenu().get(i).setVisible(false);
                getSubMenu().get(i).hideMenu();
            }
            getParent().repaint();
            getParent().revalidate();
            showing = false;
        }).start();
    }

    private void showMenu() {
        new Thread(() -> {
            for(int i = 0;i>=0;i--){
                sleep();
                getSubMenu().get(i).setVisible(false);
                getSubMenu().get(i).hideMenu();
            }
            getParent().repaint();
            getParent().revalidate();
            showing = false;
        }).start();
    }
    
    private void sleep(){
        try {
            Thread.sleep(20);
        } catch (InterruptedException e){
        }
    }
}
